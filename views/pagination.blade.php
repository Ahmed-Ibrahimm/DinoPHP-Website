<!DOCTYPE html>
<html lang="en">

<head>
    <title>Pagination - DinoPHP Framework</title>
    <style>

        .menu-link {
            font-weight: bold;
        }
        ul {
            list-style: none;
        }
        .menu-docs {
            line-height: 2em;
        }

    </style>
    @include('links')
</head>

<body>
@include('navbar')

<div class="container">
    <div class="row">
        <div class="col-lg-3">
            @include('docs-menu')
        </div>
        <div class="col-lg">
            <a href="#pagination"><h3 style="font-weight: bold"><span class="hashtag">#</span> Pagination</h3></a>
            <div id="pagination" style="margin-top: 5%;">

                <a href="#introduction"><h4 style="font-weight: bold"><span class="hashtag">#</span> Introduction</h4></a>
                <p style="font-size: 1rem;line-height: 1.8rem;color:#2b2e38">
                    In other frameworks, pagination can be very painful. We hope DinoPHP's approach to pagination will be a breath of fresh air. DinoPHP's paginator is integrated with the query builder and provides convenient, easy-to-use pagination of database records with zero configuration.
                </p>

                <a href="#pagination"><h3 style="font-weight: bold"><span class="hashtag">#</span> Usage</h3></a>
                <a href="#pagination"><h4 style="font-weight: bold"><span class="hashtag">#</span> Paginating Query Results</h4></a>
                <p style="font-size: 1rem;line-height: 1.8rem;color:#2b2e38">
                    There are several ways to paginate items. The simplest is by using the <b>paginate</b> method on the query builder. The paginate method automatically takes care of setting the query's <b>"limit"</b> and <b>"offset"</b> based on the current page being viewed by the user. By default, the current page is detected by the value of the page query string argument on the HTTP request. This value is automatically detected by Laravel, and is also automatically inserted into links generated by the paginator.
                </p>

                <div class="code">
					<?php
					highlight_string("
<?php
return Database::instance();
?>
                        ");
					?>
                </div>

                <a href="#queries"><h4 style="font-weight: bold"><span class="hashtag">#</span> Retrieving All Rows</h4></a>
                <p style="font-size: 1rem;line-height: 1.8rem;color:#2b2e38">
                    You may use the <b>table</b> or <b>query</b> method provided by the Database facade to begin a query. The table method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally retrieve the results of the query using the get method:
                </p>

                <div class="code">
					<?php
					highlight_string('
<?php
$db = Database::query("SELECT * FROM users")->get();
// OR
$db = Database::table("users")->get();
?>
                        ');
					?>
                </div>

                <p style="font-size: 1rem;line-height: 1.8rem;color:#2b2e38">
                    This is the same function but with table and where method :
                </p>

                <div class="code">
					<?php
					highlight_string('
<?php
$db = Database::table("users")->where("id", ">", "1")->get();
?>
                        ');
					?>
                </div>

                <a href="#queries"><h4 style="font-weight: bold"><span class="hashtag">#</span> Retrieving single Row</h4></a>
                <p style="font-size: 1rem;line-height: 1.8rem;color:#2b2e38">
                    If you just need to retrieve a single row from a database table, you may use the Database facade's <b>first</b> method :
                </p>
                <div class="code">
					<?php
					highlight_string('
<?php
$db = Database::table("users")->first();
?>
                        ');
					?>
                </div>

                <a href="#queries"><h4 style="font-weight: bold"><span class="hashtag">#</span> All Methods</h4></a>
                <p style="font-size: 1rem;line-height: 1.8rem;color:#2b2e38">
                    Here you will find all methods you will use it in any dynamically project with database :
                </p>
                <div class="code">
					<?php
					highlight_string('
<?php
$db = Database::table("users")
                ->select("name", "age")
                ->rightJoin("roles", "roles.id", "=", "users.role_id")
                ->leftJoin("roles", "roles.id", "=", "users.role_id")
                ->join("roles", "roles.id", "=", "users.role_id")
                ->where("id", "=", "20")
                ->orWhere("name", "=", "ahmed")
                ->orderBy("id", "desc")
                ->limit(20)
                ->offset(20)
                ->getQuery();
?>
                        ');
					?>
                </div>

            </div>
        </div>
    </div>
</div>
</div>

@include('footer')
</body>
@include('scripts')

</html>